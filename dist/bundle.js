(()=>{"use strict";function e(e,t,n){const r=n.value;return{configurable:!0,get(){return r.bind(this)}}}var t;!function(e){e[e.Active=0]="Active",e[e.Finished=1]="Finished"}(t||(t={}));class n{constructor(e,t,n,r,i){this.id=e,this.title=t,this.description=n,this.people=r,this.projectStatus=i}}class r{constructor(){this.listeners=[]}addListener(e){this.listeners.push(e)}}class i extends r{constructor(){super(),this.project=[]}static getInstance(){return this.instance||(this.instance=new i),this.instance}addProject(e,r,i){const s=Math.random.toString(),o=new n(s,e,r,i,t.Active);this.project.push(o),this.updateListener()}moveProject(e,t){const n=this.project.find((t=>t.id===e));n&&n.projectStatus!=t&&(n.projectStatus=t,this.updateListener())}updateListener(){for(const e of this.listeners)e(this.project.slice())}}const s=i.getInstance();function o(e){let t=!0;return e.required&&(t=t&&0!==e.value.toString().trim().length),null!=e.minLength&&"string"==typeof e.value&&(t=t&&e.value.length>e.minLength),null!=e.maxLength&&"string"==typeof e.value&&(t=t&&e.value.length<e.maxLength),null!=e.min&&"number"==typeof e.value&&(t=t&&e.value>e.min),null!=e.max&&"number"==typeof e.value&&(t=t&&e.value<e.max),t}class l{constructor(e,t,n,r){this.templateElement=document.getElementById(e),this.hostElement=document.getElementById(t);const i=document.importNode(this.templateElement.content,!0);this.element=i.firstElementChild,r&&(this.element.id=r),this.attach(n)}attach(e){this.hostElement.insertAdjacentElement(e?"afterbegin":"beforeend",this.element)}}class a extends l{constructor(){super("project-input","app",!0,"user-input"),this.titleInputField=this.element.querySelector("#title"),this.descriptionInputField=this.element.querySelector("#description"),this.peopleInputField=this.element.querySelector("#people"),this.configure(),this.renderContent()}getUserInput(){const e=this.titleInputField.value,t=this.descriptionInputField.value,n=this.peopleInputField.value,r={value:t,required:!0,minLength:5},i={value:+n,required:!0,min:1,max:5};return o({value:e,required:!0})&&o(r)&&o(i)?[e,t,+n]:void alert("invalid input")}submitHandler(e){e.preventDefault();const t=this.getUserInput();if(Array.isArray(t)){const[e,n,r]=t;s.addProject(e,n,r),this.clearInput()}}clearInput(){this.titleInputField.value="",this.descriptionInputField.value="",this.peopleInputField.value=""}renderContent(){}configure(){this.element.addEventListener("submit",this.submitHandler)}}!function(e,t,n,r){var i,s=arguments.length,o=s<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,n,r);else for(var l=e.length-1;l>=0;l--)(i=e[l])&&(o=(s<3?i(o):s>3?i(t,n,o):i(t,n))||o);s>3&&o&&Object.defineProperty(t,n,o)}([e],a.prototype,"submitHandler",null);class c extends l{constructor(e,t){super("single-project",e,!1,t.id),this.project=t,this.configure(),this.renderContent()}get persons(){return 1===this.project.people?"1 person":`${this.project.people} persons`}dragStartHandler(e){e.dataTransfer.setData("text/plain",this.project.id),e.dataTransfer.effectAllowed="move"}dragEndhandler(e){console.log(" ended ")}renderContent(){this.element.querySelector("h2").textContent=this.project.title,this.element.querySelector("h3").textContent=this.persons+" were assigned",this.element.querySelector("p").textContent=this.project.description}configure(){this.element.addEventListener("dragstart",this.dragStartHandler),this.element.addEventListener("dragend",this.dragEndhandler)}}!function(e,t,n,r){var i,s=arguments.length,o=s<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,n,r);else for(var l=e.length-1;l>=0;l--)(i=e[l])&&(o=(s<3?i(o):s>3?i(t,n,o):i(t,n))||o);s>3&&o&&Object.defineProperty(t,n,o)}([e],c.prototype,"dragStartHandler",null);var d=function(e,t,n,r){var i,s=arguments.length,o=s<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,n,r);else for(var l=e.length-1;l>=0;l--)(i=e[l])&&(o=(s<3?i(o):s>3?i(t,n,o):i(t,n))||o);return s>3&&o&&Object.defineProperty(t,n,o),o};class p extends l{constructor(e){super("project-list","app",!1,`${e}-projects`),this.type=e,this.assignedProject=[],this.assignedProject=[],this.configure(),this.renderContent()}dragOverhandeler(e){e.dataTransfer&&"text/plain"==e.dataTransfer.types[0]&&(e.preventDefault(),this.element.querySelector("ul").classList.add("droppable"))}dropHandler(e){var n;const r=null===(n=e.dataTransfer)||void 0===n?void 0:n.getData("text/plain");r&&s.moveProject(r,"active"===this.type?t.Active:t.Finished)}dragLeaveHandler(e){this.element.querySelector("ul").classList.remove("droppable")}renderProjects(){document.getElementById(`${this.type}-projects-list`).innerHTML="";for(const e of this.assignedProject)new c(this.element.querySelector("ul").id,e)}configure(){this.element.addEventListener("dragover",this.dragOverhandeler),this.element.addEventListener("dragleave",this.dragLeaveHandler),this.element.addEventListener("drop",this.dropHandler),s.addListener((e=>{const n=e.filter((e=>"active"==this.type?e.projectStatus==t.Active:e.projectStatus==t.Finished));this.assignedProject=n,this.renderProjects()}))}renderContent(){const e=`${this.type}-projects-list`;this.element.querySelector("ul").id=e,this.element.querySelector("h2").textContent=this.type.toUpperCase()+" PROJECTS"}}d([e],p.prototype,"dragOverhandeler",null),d([e],p.prototype,"dropHandler",null),d([e],p.prototype,"dragLeaveHandler",null),new a,new p("active"),new p("finished")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,